name: Validar Estructura
on: 
  pull_request:
    branches: [main]
  push:
    branches-ignore: [main]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Validar nombre de branch
        run: |
          # Obtener el nombre de la branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            branch="${{ github.head_ref }}"
          else
            branch="${GITHUB_REF#refs/heads/}"
          fi
          
          echo "üîç Validando branch: $branch"
          
          # Validar que siga la estructura correcta
          if [[ ! $branch =~ ^(feature|bugfix|hotfix|release|docs|refactor)\/[a-z0-9-]+$ ]] && [[ $branch != "main" ]]; then
            echo "‚ùå ERROR: Branch '$branch' no sigue la convenci√≥n"
            echo ""
            echo "üåø RAMAS - Nomenclatura Clara"
            echo ""
            echo "üìã Formato recomendado:"
            echo "   tipo/descripcion-breve-kebab-case"
            echo ""
            echo "üìã Tipos de rama:"
            echo "   ‚Ä¢ feature/ - Nuevas funcionalidades"
            echo "   ‚Ä¢ bugfix/ - Correcci√≥n de bugs"
            echo "   ‚Ä¢ hotfix/ - Correcciones urgentes en producci√≥n"
            echo "   ‚Ä¢ release/ - Preparaci√≥n de versiones"
            echo "   ‚Ä¢ docs/ - Solo documentaci√≥n"
            echo "   ‚Ä¢ refactor/ - Refactorizaci√≥n"
            echo ""
            echo "‚úÖ Ejemplos BUENOS:"
            echo "   ‚Ä¢ feature/user-authentication"
            echo "   ‚Ä¢ feature/payment-integration"
            echo "   ‚Ä¢ bugfix/login-validation-error"
            echo "   ‚Ä¢ hotfix/critical-security-patch"
            echo "   ‚Ä¢ release/v2.1.0"
            echo "   ‚Ä¢ docs/api-documentation"
            echo "   ‚Ä¢ refactor/database-queries"
            echo ""
            echo "‚ùå Ejemplos MALOS:"
            echo "   ‚Ä¢ juan"
            echo "   ‚Ä¢ mi-rama"
            echo "   ‚Ä¢ test"
            echo "   ‚Ä¢ branch1"
            echo "   ‚Ä¢ feature-nueva"
            exit 1
          fi
          
          echo "‚úÖ Nombre de branch v√°lido: $branch"
          
      - name: Validar mensajes de commits
        run: |
          echo "üîç Validando mensajes de commits..."
          
          # Obtener commits desde main
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            commits=$(git log --oneline origin/main..HEAD --pretty=format:"%s")
          else
            commits=$(git log --oneline origin/main..HEAD --pretty=format:"%s" 2>/dev/null || git log --oneline -1 --pretty=format:"%s")
          fi
          
          if [ -z "$commits" ]; then
            echo "‚úÖ No hay commits nuevos para validar"
            exit 0
          fi
          
          invalid_commits=""
          
          while IFS= read -r commit_msg; do
            # Validar formato: "tipo: descripci√≥n breve" (sin par√©ntesis de scope)
            if [[ ! $commit_msg =~ ^(feat|fix|docs|style|refactor|test|chore): .+ ]]; then
              echo "‚ùå Commit inv√°lido (formato): '$commit_msg'"
              invalid_commits="$invalid_commits\n  ‚Ä¢ $commit_msg (formato incorrecto)"
            else
              # Validar que est√© en ingl√©s (no contiene caracteres especiales del espa√±ol)
              description=$(echo "$commit_msg" | sed 's/^[^:]*: //')
              if [[ $description =~ [√±√°√©√≠√≥√∫√º¬ø¬°] ]]; then
                echo "‚ùå Commit inv√°lido (idioma): '$commit_msg'"
                invalid_commits="$invalid_commits\n  ‚Ä¢ $commit_msg (debe estar en ingl√©s)"
              else
                echo "‚úÖ Commit v√°lido: '$commit_msg'"
              fi
            fi
          done <<< "$commits"
          
          if [ ! -z "$invalid_commits" ]; then
            echo ""
            echo "‚ùå ERROR: Commits con formato incorrecto:"
            echo -e "$invalid_commits"
            echo ""
            echo "üìã COMMITS - Formato Est√°ndar"
            echo ""
            echo "üìã Estructura b√°sica:"
            echo "   Tipo: descripci√≥n breve"
            echo ""
            echo "üìã Tipos de commit:"
            echo "   ‚Ä¢ feat: Nueva funcionalidad"
            echo "   ‚Ä¢ fix: Correcci√≥n de bugs"
            echo "   ‚Ä¢ docs: Documentaci√≥n"
            echo "   ‚Ä¢ style: Formato/estilo (sin cambios de l√≥gica)"
            echo "   ‚Ä¢ refactor: Refactorizaci√≥n de c√≥digo"
            echo "   ‚Ä¢ test: Agregar o modificar tests"
            echo "   ‚Ä¢ chore: Tareas de mantenimiento"
            echo ""
            echo "‚úÖ Ejemplos BUENOS:"
            echo "   ‚Ä¢ feat: add JWT token validation"
            echo "   ‚Ä¢ fix: resolve password reset bug"
            echo "   ‚Ä¢ docs: update installation instructions"
            echo "   ‚Ä¢ refactor: simplify user data processing"
            echo "   ‚Ä¢ test: add unit tests for date helpers"
            echo ""
            echo "‚ùå Ejemplos MALOS:"
            echo "   ‚Ä¢ hola (no est√° en ingl√©s)"
            echo "   ‚Ä¢ fix (falta descripci√≥n)"
            echo "   ‚Ä¢ cambios varios (no est√° en ingl√©s)"
            echo "   ‚Ä¢ update (falta tipo)"
            echo "   ‚Ä¢ feat: a√±adir funcionalidad (no est√° en ingl√©s)"
            echo "   ‚Ä¢ fix: corregir bug (no est√° en ingl√©s)"
            echo ""
            echo "‚ö†Ô∏è  IMPORTANTE: Los commits deben estar en INGL√âS"
            exit 1
          fi
          
          echo "‚úÖ Todos los commits tienen formato v√°lido"
